#!/bin/sh

DIR=$(dirname "$(readlink -f "$0")")
JQ="/usr/bin/jq"
BLOBFUSE="blobfuse"
LOG="/var/log/blobfuse-driver.log"
VER="1.0.13"

usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 mount <mount dir> <json params>"
	err "\t$0 unmount <mount dir>"
	exit 1
}

err() {
	echo `date` "ERROR:" $* >> $LOG
	echo $* 1>&2
}

log() {
	echo `date` "INFO:" $* >> $LOG
	echo $* >&1
}

ismounted() {
	MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
	if echo $MOUNT | grep -q ${MNTPATH}; then
		return 0
	fi
	return 1
}

mount() {
	MNTPATH="$1"
	ACCOUNTNAME=$(echo "$JSON"|"$JQ" -r '.["kubernetes.io/secret/accountname"] // empty'|base64 -d)
	ACCOUNTKEY=$(echo "$JSON"|"$JQ" -r '.["kubernetes.io/secret/accountkey"] // empty'|base64 -d)
	ACCOUNTSASTOKEN=$(echo "$JSON"|"$JQ" -r '.["kubernetes.io/secret/accountsastoken"] // empty'|base64 -d)
	BLOBENDPOINT=$(echo "$JSON"|"$JQ" -r '.["kubernetes.io/secret/blobendpoint"] // empty'|base64 -d)
	CONTAINER=$(echo "$JSON"|"$JQ" -r '.container //empty')
	DRIVERPATH=$(echo "$JSON"|"$JQ" -r '.driverpath //empty')
	TMP_PATH=$(echo "$JSON"|"$JQ" -r '.tmppath //empty')
	MOUNT_OPTIONS=$(echo "$JSON"|"$JQ" -r '.mountoptions //empty')
	READ_WRITE=$(echo "$JSON"|"$JQ" -r '.["kubernetes.io/readwrite"] //empty')

	if [ -z "${ACCOUNTNAME}" ]; then
		err "{\"status\": \"Failure\", \"message\": \"validation failed, error log:accountname is empty\"}"
		exit 1
	fi

	if [ -z "${CONTAINER}" ]; then
		err "{\"status\": \"Failure\", \"message\": \"validation failed, error log:container is empty\"}"
		exit 1
	fi
	
	if [ -z "${TMP_PATH}" ]; then
		TMP_PATH="/tmp/blobfuse/"
		echo `date` "INFO: tmp-path not specified, use default path: ${TMP_PATH}"  >> $LOG
	fi

	if ismounted ; then
		devname=`findmnt -n -o SOURCE ${MNTPATH}`
		log "{\"status\": \"Success\" , \"message\":\"log:INF: Mountpoint: ${MNTPATH} has ${devname} already mounted\"}"
		exit 0
	fi

        if [ ! -z "${DRIVERPATH}" ]; then
                BLOBFUSE=$DRIVERPATH
                echo "`date` INF: set driver path as $BLOBFUSE " >> $LOG
        fi

	read_only_param=""
	if [ $READ_WRITE = "ro" ]; then
		read_only_param="-o ro"
	fi

	echo "`date` EXEC: mkdir -p ${MNTPATH}" >> $LOG
	mkdir -p ${MNTPATH} >>$LOG 2>&1

	export AZURE_STORAGE_ACCOUNT=${ACCOUNTNAME}

	if [ ! -z "${ACCOUNTKEY}" ]; then
		export AZURE_STORAGE_ACCESS_KEY=${ACCOUNTKEY}
		echo "`date` INF: AZURE_STORAGE_ACCESS_KEY is set " >> $LOG
	fi
	
	if [ ! -z "${BLOBENDPOINT}" ]; then
		export AZURE_STORAGE_BLOB_ENDPOINT=${BLOBENDPOINT}
		echo "`date` INF: BLOBENDPOINT is set " >> $LOG
	fi
	
	if [ ! -z "${ACCOUNTSASTOKEN}" ]; then
		export AZURE_STORAGE_SAS_TOKEN=${ACCOUNTSASTOKEN}
		echo "`date` INF: AZURE_STORAGE_SAS_TOKEN is set " >> $LOG
	fi

	# we don't output ACCOUNTKEY here
	output_comand="export AZURE_STORAGE_ACCOUNT=${ACCOUNTNAME}"
	echo "`date` INF: export storage account - ${output_comand} " >> $LOG

	# mkdir to fix issue: https://github.com/Azure/kubernetes-volume-drivers/issues/58 on blobfuse 1.2.3
	mkdir -p ${TMP_PATH}
	
	#mounting
	echo "`date` EXEC: ${BLOBFUSE} ${MNTPATH} --container-name=${CONTAINER} --tmp-path=${TMP_PATH} -o allow_other ${read_only_param} ${MOUNT_OPTIONS}" >>$LOG
	${BLOBFUSE} ${MNTPATH} --container-name=${CONTAINER} --tmp-path=${TMP_PATH} -o allow_other ${read_only_param} ${MOUNT_OPTIONS}
	if [ "$?" != "0" ]; then
		errorLog=`tail -n 1 "${LOG}"`
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device /dev/${diskname} at ${MNTPATH}, accountname:${ACCOUNTNAME}, error log:${errorLog}\" }"
		exit 1
	fi

	log '{"status": "Success"}'
	exit 0
}

unmount() {
	MNTPATH="$1"

	if ! ismounted ; then
		log '{"status": "Success"}'
		exit 0
	fi

	#find device name
	devname=`findmnt -n -o SOURCE ${MNTPATH}`
	if [ ${#devname} -lt 1 ]; then
		echo "`date` INF: mount path:${MNTPATH} has no mounts" >> $LOG
		log '{"status": "Success"}'
		exit 0
	fi

	echo "`date` EXEC: umount $MNTPATH, devname: $devname" >>$LOG
	/bin/umount $MNTPATH >> $LOG 2>&1
	if [ "$?" != "0" ]; then
		errorLog=`tail -n 1 "${LOG}"`
		err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}, error log:${errorLog}\" }"
		exit 1
	fi

	echo "`date` EXEC: rmdir ${MNTPATH}" >> $LOG
	rmdir "${MNTPATH}" >> $LOG 2>&1

	log '{"status": "Success"}'
	exit 0
}

## ---------------
## main
## ---------------

op=$1

if [ "$op" = "init" ]; then
	echo "ENV Path: $PATH" >> $LOG
	log '{"status": "Success", "capabilities": {"attach": false, "fsGroup": false}}'
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	mount)
		JSON=$2
		mount $*
		;;
	unmount)
		unmount $*
		;;
	*)
	usage
esac

exit 1
